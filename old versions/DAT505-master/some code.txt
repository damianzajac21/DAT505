  var api = { state: 'Walking' }; //animation variable

  camera.lookAt( new THREE.Vector3( 0, 2, 0 ) ); //from init function, looks right at the Object

  var loader = new THREE.GLTFLoader();
  loader.load( 'models-RobotExpressive/RobotExpressive.glb', function( gltf ) {

    model = gltf.scene;
    scene.add( model );
    createGUI( model, gltf.animations );

  }, undefined, function( e ) {

    console.error( e );

  } ); //GLTF model loader



   function createGUI( model, animations ) {

    var states = [ 'Idle', 'Walking', 'Running', 'Dance', 'Death', 'Sitting', 'Standing' ];
    var emotes = [ 'Jump', 'Yes', 'No', 'Wave', 'Punch', 'ThumbsUp' ];

    gui = new dat.GUI();

    mixer = new THREE.AnimationMixer( model );

    actions = {};

    for ( var i = 0; i < animations.length; i++ ) {

      var clip = animations[ i ];
      var action = mixer.clipAction( clip );
      actions[ clip.name ] = action;

      if ( emotes.indexOf( clip.name ) >= 0 || states.indexOf( clip.name ) >= 4 ) {

          action.clampWhenFinished = true;
          action.loop = THREE.LoopOnce;

      }

    }

    // states

    var statesFolder = gui.addFolder( 'States' );

    var clipCtrl = statesFolder.add( api, 'state' ).options( states );

    clipCtrl.onChange( function() {

      fadeToAction( api.state, 0.5 );

    } );

    statesFolder.open();

    // emotes

    var emoteFolder = gui.addFolder( 'Emotes' );

    function createEmoteCallback( name ) {

      api[ name ] = function() {

        fadeToAction( name, 0.2 );

        mixer.addEventListener( 'finished', restoreState );

      };

      emoteFolder.add( api, name );

    }

    function restoreState() {

      mixer.removeEventListener( 'finished', restoreState );

      fadeToAction( api.state, 0.2 );

    }

    for ( var i = 0; i < emotes.length; i++ ) {

      createEmoteCallback( emotes[ i ] );

    }

    emoteFolder.open();

    // expressions

    face = model.getObjectByName( 'Head_2' );

    var expressions = Object.keys( face.morphTargetDictionary );
    var expressionFolder = gui.addFolder('Expressions');

    for ( var i = 0; i < expressions.length; i++ ) {

      expressionFolder.add( face.morphTargetInfluences, i, 0, 1 ).name( expressions[ i ] );

    }

    activeAction = actions['Walking'];
    activeAction.play();

    expressionFolder.open();

  //}

  function fadeToAction( name, duration ) {

    previousAction = activeAction;
    activeAction = actions[ name ];

    if ( previousAction !== activeAction ) {

      previousAction.fadeOut( duration );

    }

    activeAction
      .reset()
      .setEffectiveTimeScale( 1 )
      .setEffectiveWeight( 1 )
      .fadeIn( duration )
      .play();

  }
