//Settings for models and material
var geometry = new THREE.CubeGeometry( 1, 1, 1 );
geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, 0.5, 0 ) );
var material = new THREE.MeshPhongMaterial({overdraw: true, color: 0xcccccc});

//Geometry to store all buildings of the city
var cityGeometry = new THREE.Geometry();
for (var i = 0; i < 300; i++) {

  //Create geometry as a clone
  var building = new THREE.Mesh(geometry.clone());

  //Randomize position and scale of the buildings
  building.position.x = Math.floor( Math.random() * 200 - 100 ) * 4;
  building.position.z = Math.floor( Math.random() * 200 - 100 ) * 4;
  building.scale.x  = Math.pow(Math.random(), 2) * 50 + 10;
  building.scale.y  = Math.pow(Math.random(), 3) * building.scale.x * 8 + 8;
  building.scale.z  = building.scale.x;

  //Merge all buildings to one model - cityGeometry
  THREE.GeometryUtils.merge(cityGeometry, building);
}

//Mesh of the city
var city = new THREE.Mesh(cityGeometry, material);

//Cast shadows of the models
city.castShadow = true;
city.receiveShadow = true;
scene.add(city);


/*window.addEventListener("keydown", checkKeyPressed, false);

function checkKeyPressed(e) {
   if (e.keyCode == "72") {
       console.log(camera.position.y);
       console.log(camera.position.z);
       console.log(camera.rotation.x);
   }
} */


/*   var geo = new THREE.PlaneGeometry(2000, 2000, 40, 40);
   var mat = new THREE.MeshPhongMaterial({color: 0x9db3b5, overdraw: true});
   var floor = new THREE.Mesh(geo, mat);
   floor.rotation.x = -0.5 * Math.PI;
   floor.receiveShadow = true;
   scene.add(floor); */







   /*scene.add( new THREE.AmbientLight( 0xdddddd ) );
   var light = new THREE.DirectionalLight( 0xdfebff, 1 );
   light.position.set( 50, 200, 100 );
   light.position.multiplyScalar( 1.3 );
   light.castShadow = true;
   light.shadow.mapSize.width = 1024;
   light.shadow.mapSize.height = 1024;
   var d = 300;
   light.shadow.camera.left = - d;
   light.shadow.camera.right = d;
   light.shadow.camera.top = d;
   light.shadow.camera.bottom = - d;
   light.shadow.camera.far = 1000;
   scene.add( light );*/

   /*var rand = function() {
   return Math.random() - 0.5;
   };

   for(var i = 0; i < cloudCount; i++) {

   var cloud = new THREE.Cloud();

   cloud.position.set(rand() * range, rand() * range, rand() * range);
   cloud.rotation.set(rand() * Math.PI, rand() * Math.PI, rand() * Math.PI);

   var scale = 2.0 + Math.random() * 6;
   cloud.scale.set(scale, scale, scale);

   scene.add(cloud);

   clouds.push(cloud);
   }

   var cloud = new THREE.Cloud( 0xeeeeee );

   cloud.scale.set( 3, 3, 3 );
   cloud.position.set( 0, 1, 0 );
   cloud.rotation.set( Math.PI * 0.25, Math.PI * 0.5, 0 );

   scene.add( cloud ); */

   //Create the lighting system and add to the scene
   /*   var light = new THREE.DirectionalLight(0xf9f1c2, 1);
   light.position.set(500, 1500, 1000);
   light.shadowMapWidth = 2048;
   light.shadowMapHeight = 2048;
   var d = 1000;
   light.shadowCameraLeft = d;
   light.shadowCameraRight = -d;
   light.shadowCameraTop = d;
   light.shadowCameraBottom = -d;
   light.shadowCameraFar = 2500;
   scene.add(light); */
   //   var light = new THREE.DirectionalLight( 0xffffff, 1.5/*0xE6E0B8*/ );
   /*   light.position.set( 1, 1, 1 );
   light.castShadow = true;
   light.shadow.mapSize.width = 2000;
   light.shadow.mapSize.height = 2000;
   light.shadow.camera.left = 50;
   light.shadow.camera.right = -50;
   light.shadow.camera.top = -50;
   light.shadow.camera.bottom = 50;
   light.shadow.camera.near = 1;
   light.shadow.camera.far = 200;
   scene.add( light );

   var light2 = new THREE.DirectionalLight( 0xffffff, 0.6 );
   light2.position.set( -1, -1, -1 );
   scene.add( light2 );
   light = new THREE.DirectionalLight( 0xffffff );
   light.position.set( 0, 20, 10 );
   scene.add( light ); */


   /*  controls = new THREE.FirstPersonControls(camera);
     controls.lookSpeed = 0.35;
     controls.movementSpeed = 7;
     controls.noFly = true;
     controls.lookVertical = true;
     controls.constrainVertical = true;
     controls.verticalMin = 1.5;
     controls.verticalMax = 1.8;
     controls.lon = -150;
     controls.lat = 120;*/


     //renderer.shadowMapEnabled = true;

     /*camera.position.set( 10, 2, 0 );
     camera.rotation.y = 180;*/

     //camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );

     //scene.fog = new THREE.FogExp2( 0x98bbbc, 0.01325 );

     //camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );


     //scene.background = new THREE.Color( 0x99efff );

     //console.log(light.position.z);


     //light.position.y += 1;
   } //else if (pozition > 500){
     //light.position.y -= 2;
     //light.position.z = -400;
   //} else {
     //light.position.y -= 1;
   //}
   //light.position.x -= 1;
   //light.position.z -= 1;
   //console.log(light.position.z);


   //scene.add(parameters);
   /*var t = clock.elapsedTime * 1;

   for(var i = 0, n = 10000; i < n; i++) {
 }*/



   //document.body.style.backgroundColor = '#d7f0f7';


   /*var cloudCount = 10;
   var clouds = [];
   var range = 10;*/


   /*var loader = new THREE.OBJLoader();
   loader.load(
     'models/tinyhouse.obj', // Replace this with your filename/location
     function (mesh) {
       mesh.scale.set(1.2,1.2,1.2);
       mesh.position.y = 0;
       mesh.position.z = -4.3;
       mesh.rotation.y = 3.15;
       mesh.traverse( function ( child ) {
         child.castShadow = true;
       });
       scene.add(mesh);
     }
   )*/

   //var pozition = light.position.y;
   //light.position.y = -500;
   /*light.position.y -= 2;
   if (pozition === 497.8837921882747) {
     light.position.y -= 1;
   }*/
   //console.log(light.position.y);
