  var api = { state: 'Walking' }; //animation variable

  camera.lookAt( new THREE.Vector3( 0, 2, 0 ) ); //from init function, looks right at the Object

  var loader = new THREE.GLTFLoader();
  loader.load( 'models-RobotExpressive/RobotExpressive.glb', function( gltf ) {

    model = gltf.scene;
    scene.add( model );
    createGUI( model, gltf.animations );

  }, undefined, function( e ) {

    console.error( e );

  } ); //GLTF model loader



   function createGUI( model, animations ) {

    var states = [ 'Idle', 'Walking', 'Running', 'Dance', 'Death', 'Sitting', 'Standing' ];
    var emotes = [ 'Jump', 'Yes', 'No', 'Wave', 'Punch', 'ThumbsUp' ];

    gui = new dat.GUI();

    mixer = new THREE.AnimationMixer( model );

    actions = {};

    for ( var i = 0; i < animations.length; i++ ) {

      var clip = animations[ i ];
      var action = mixer.clipAction( clip );
      actions[ clip.name ] = action;

      if ( emotes.indexOf( clip.name ) >= 0 || states.indexOf( clip.name ) >= 4 ) {

          action.clampWhenFinished = true;
          action.loop = THREE.LoopOnce;

      }

    }

    // states

    var statesFolder = gui.addFolder( 'States' );

    var clipCtrl = statesFolder.add( api, 'state' ).options( states );

    clipCtrl.onChange( function() {

      fadeToAction( api.state, 0.5 );

    } );

    statesFolder.open();

    // emotes

    var emoteFolder = gui.addFolder( 'Emotes' );

    function createEmoteCallback( name ) {

      api[ name ] = function() {

        fadeToAction( name, 0.2 );

        mixer.addEventListener( 'finished', restoreState );

      };

      emoteFolder.add( api, name );

    }

    function restoreState() {

      mixer.removeEventListener( 'finished', restoreState );

      fadeToAction( api.state, 0.2 );

    }

    for ( var i = 0; i < emotes.length; i++ ) {

      createEmoteCallback( emotes[ i ] );

    }

    emoteFolder.open();

    // expressions

    face = model.getObjectByName( 'Head_2' );

    var expressions = Object.keys( face.morphTargetDictionary );
    var expressionFolder = gui.addFolder('Expressions');

    for ( var i = 0; i < expressions.length; i++ ) {

      expressionFolder.add( face.morphTargetInfluences, i, 0, 1 ).name( expressions[ i ] );

    }

    activeAction = actions['Walking'];
    activeAction.play();

    expressionFolder.open();

  //}

  function fadeToAction( name, duration ) {

    previousAction = activeAction;
    activeAction = actions[ name ];

    if ( previousAction !== activeAction ) {

      previousAction.fadeOut( duration );

    }

    activeAction
      .reset()
      .setEffectiveTimeScale( 1 )
      .setEffectiveWeight( 1 )
      .fadeIn( duration )
      .play();

  }







  <!DOCTYPE html>
  <html lang="en">
  	<head>
  		<title>DAT505</title>
  		<meta charset="utf-8">
  		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
  		<style>
  			body {
  				font-family: Monospace;
  				background-color: #000;
  				margin: 0px;
  				overflow: hidden;
  			}
  		</style>
  	</head>

  	<body>
  	<!--	<div id="info">
  			<a href="http://threejs.org" target="_blank" rel="noopener">three.js</a> - webgl - skinning and morphing<br />
  			<p>
  				The animation system allows clips to be played individually, looped, or crossfaded with
  				other clips. This example shows a character looping in one of several base animation states,
  				then transitioning smoothly to one-time actions. Facial expressions are controlled
  				independently with morph targets.
  			</p>
  			Model by
  			<a href="https://www.patreon.com/quaternius" target="_blank" rel="noopener">Tomás Laulhé</a>,
  			modifications by <a href="https://donmccurdy.com/" target="_blank" rel="noopener">Don McCurdy</a>. CC0.<br />
  		</div> -->
  		<script src="/libs/PointerLockControls.js"></script>
  		<script src="/libs/three.js"></script>
  		<script src="/libs/GLTFLoader.js"></script>
  		<script src="/libs/MTLLoader.js"></script>
  		<script src="/libs/OBJLoader.js"></script>
  		<script src="/libs/WebGL.js"></script>
  		<script src="/libs/stats.min.js"></script>
  		<script src="/libs/dat.gui.min.js"></script>
  		<script src="/libs/OrbitControls.js"></script>
  		<script src="/libs/controls.js"></script>
  		<script src="/libs/controlSetup.js"></script>

  		<script src="sketch.js">></script>

  	</body>
  </html>





    if ( WEBGL.isWebGLAvailable() === false ) {

      document.body.appendChild( WEBGL.getWebGLErrorMessage() );

    }


    container = document.createElement( 'div' );
    document.body.appendChild( container );

    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 100 );
    camera.position.set( -5, 2, 20 );

    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x99efff );
    scene.fog = new THREE.Fog( 0x99efff, 20, 100 );

    clock = new THREE.Clock();
